name: Test Fix Redirects Logic
on:
  push:
    branches: [fix/add-redirects-to-user-guide]
  pull_request:
    branches: [master]
    paths: 
      - 'docs/user-guide/**'
      - '.github/workflows/test-fix-redirects.yml'

jobs:
  test-fix-redirects:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Test redirect fixing logic
        id: test-fix
        run: |
          echo "Testing redirect_to fixing logic..."
          
          # Load shared redirect configuration
          source .github/workflows/redirect-config.sh
          
          # Create a test directory with sample files
          mkdir -p test-user-guide/subdir
          
          # Test file 1: No front matter
          cat > test-user-guide/no-frontmatter.md << 'EOF'
          # Test File
          This file has no front matter.
          EOF
          
          # Test file 2: Has front matter but no redirect
          cat > test-user-guide/has-frontmatter.md << 'EOF'
          ---
          layout: user-guide
          permalink: /test
          ---
          # Test File
          This file has front matter.
          EOF
          
          # Test file 3: Has redirect (should be updated)
          cat > test-user-guide/has-redirect.md << 'EOF'
          ---
          layout: user-guide
          redirect_to: https://old-url.com/test.html
          ---
          # Test File
          This file has wrong redirect.
          EOF
          
          # Test file 4: In subdirectory
          cat > test-user-guide/subdir/nested.md << 'EOF'
          # Nested File
          This file is in a subdirectory.
          EOF
          
          echo "Before processing:"
          echo "===================="
          find test-user-guide -name "*.md" -exec echo "File: {}" \; -exec head -10 {} \; -exec echo "" \;
          
          # Run the same logic as the real workflow
          find test-user-guide -name "*.md" -type f | while read -r file; do
            if [ ! -f "$file" ]; then
              continue
            fi
            
            echo "Processing $file..."
            
            # Expected URL (dynamically construct from file path)
            file_path_no_ext=${file%.md}
            expected_url="${READTHEDOCS_DOMAIN}${READTHEDOCS_VERSION}${READTHEDOCS_USER_GUIDE_PREFIX}${file_path_no_ext}.html"
            
            echo "  Expected URL: $expected_url"
            
            # Check if file already has redirect_to
            if grep -q "^redirect_to:" "$file"; then
              # Update existing redirect_to
              sed -i "s|^redirect_to:.*|redirect_to: $expected_url|" "$file"
              echo "  ‚úÖ Updated redirect_to in $file"
            else
              # Need to add redirect_to after the front matter
              if grep -q "^---" "$file"; then
                # File has front matter, add redirect_to before closing ---
                awk -v url="$expected_url" '
                  /^---/ && !frontmatter_started { 
                    frontmatter_started = 1; 
                    print; 
                    next 
                  }
                  /^---/ && frontmatter_started && !redirect_added {
                    print "redirect_to: " url;
                    redirect_added = 1;
                    print;
                    next
                  }
                  { print }
                ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
                echo "  ‚úÖ Added redirect_to to existing front matter in $file"
              else
                # File has no front matter, add it
                {
                  echo "---"
                  echo "layout: user-guide"
                  echo "redirect_to: $expected_url"
                  echo "---"
                  echo ""
                  cat "$file"
                } > "$file.tmp" && mv "$file.tmp" "$file"
                echo "  ‚úÖ Added front matter with redirect_to to $file"
              fi
            fi
          done
          
          echo ""
          echo "After processing:"
          echo "===================="
          find test-user-guide -name "*.md" -exec echo "File: {}" \; -exec head -10 {} \; -exec echo "" \;
          
          # Verify results
          echo ""
          echo "Verification:"
          echo "=============="
          
          failed=false
          find test-user-guide -name "*.md" -type f | while read -r file; do
            file_path_no_ext=${file%.md}
            expected_url="${READTHEDOCS_DOMAIN}${READTHEDOCS_VERSION}${READTHEDOCS_USER_GUIDE_PREFIX}${file_path_no_ext}.html"
            
            redirect_line=$(grep "^redirect_to:" "$file" || true)
            if [ -z "$redirect_line" ]; then
              echo "‚ùå Missing redirect_to in $file"
              failed=true
            else
              redirect_url=$(echo "$redirect_line" | sed 's/redirect_to: *//')
              if [ "$redirect_url" != "$expected_url" ]; then
                echo "‚ùå Incorrect redirect_to in $file"
                echo "    Found:    $redirect_url"
                echo "    Expected: $expected_url"
                failed=true
              else
                echo "‚úÖ Correct redirect_to in $file"
              fi
            fi
          done
          
          echo ""
          if [ "$failed" = "true" ]; then
            echo "‚ùå Test failed - some files have incorrect redirects"
            exit 1
          else
            echo "üéâ Test passed - all files have correct redirects!"
          fi 